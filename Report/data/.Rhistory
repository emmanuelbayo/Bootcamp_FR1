mean((mean(y[train]) - y.test)^2) #je fais la meme chose avec un model ds lekel ts les beta st 0, ila solmen lordon? a lorigine je veux voir si le fait davoir des var explicative chgent kelke chose ou pas.
ridge.pred <- predict(ridge.mod, s = 1e10, newx = x[test, ]) #ici on fait la mme chose avec un lambda tresssss grand 10 puissce 10, on attend un mse va se rapprocher du cas ou les beta st nul car kan lambda grand dc beta  tres peti, on a 193253, ca se raproch dc de lotr
mean((ridge.pred - y.test)^2)
ridge.pred <- predict(ridge.mod, s = 0, newx = x[test, ],
exact = T, x = x[train, ], y = y[train]) #ici lambda = 0 on fait dc la meme chose ke les MC , on use la cmde lm ki permet de faire les mod lin?aire,
mean((ridge.pred - y.test)^2)
lm(y ~ x, subset = train) # on fait un model lin?aire sur les donn? daprentissage "Train", on use lm pr faire mc direct car pas d'int?ret de faire ridge vu ke lambda=0, ca revien ? faire des MC
summary(lm(y ~ x, subset = train))
predict(ridge.mod, s = 0, exact = T, type = "coefficients",
x = x[train, ], y = y[train])[1:20, ]
set.seed(1) #ici on ve choisir lambda par la valid crois?, et dc on cmce par fixer la graine
cv.out <- cv.glmnet(x[train, ], y[train], alpha = 0) #cv.glmnet cmd pr faire la valid crois?e
?cv.glmnet
plot(cv.out)
bestlam <- cv.out$lambda.min # c'est 326.0828 ?a change car pas mem ech ki minimise la val de lambda
bestlam
log(bestlam) # on prend le log pr voir ou sa se situe sur le graphique.
log(bestlam) # on prend le log pr voir ou sa se situe sur le graphique.
ridge.pred <- predict(ridge.mod, s = bestlam,
newx = x[test, ])
mean((ridge.pred - y.test)^2) # le mse est plus peti ke pr lambda = 4 car c'est le meilleur mse
out <- glmnet(x, y, alpha = 0)
predict(out, type = "coefficients", s = bestlam)[1:20, ] #les beta chapo st bcp mieux car on a mtn le bon lambda
plot(cv.out)
bestlam <- cv.out$lambda.min # c'est 326.0828 ?a change car pas mem ech ki minimise la val de lambda
bestlam
log(bestlam) # on prend le log pr voir ou sa se situe sur le graphique.
ridge.pred <- predict(ridge.mod, s = bestlam,
newx = x[test, ])
mean((ridge.pred - y.test)^2) # le mse est plus peti ke pr lambda = 4 car c'est le meilleur mse
u=1:10
var(u)
mean(u)
sum(u-5.5)
sum((u-5.5)**2)
sum((u-5.5)**2)/10
sum((u-5.5)**2)/9
install.packages("‘CASdatasets")
R.version()
R.version()
R.Version()
install.packages("CASdatasets", repos = "http://cas.uqam.ca/pub/", type="source")
library(CASdatasets)
library(CASdatasets)
install.packages("CASdatasets", repos = "http://cas.uqam.ca/pub/", type="source")
install.packages("xts")
install.packages("sp")
install.packages("CASdatasets", repos = "http://cas.uqam.ca/pub/", type="source")
library(CASdatasets)
data(freMTPLfreq)
View(freMTPLfreq)
View(freMTPLfreq)
data(freMTPLsev)
View(freMTPLsev)
View(freMTPLsev)
getwd()
tinytex::install_tinytex()
install.packages('tinytex')
remove.packages(tinytex)
remove.packages('tinytex')
install.packages('tinytex')
tinytex::install_tinytex()
getwd()
load("~/Statistique_R/Projet_2/.RData")
getwd()
load("~/Statistique_R/Projet_2/.RData")
View(france)
View(france)
View(france)
View(france)
install.packages("ggplot2")
library(corrplot)
install.packages("dplyr")
install.packages("corrplot")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(corrplot)
library(ggplot2)
library(dplyr)
library(corrplot)
library(ggplot2)
library(dplyr)
library(corrplot)
### Chargement des packages
```{r ,message=FALSE, warning=FALSE}
library(ggplot2)
library(dplyr)
library(corrplot)
knitr::opts_chunk$set(echo = TRUE)
# Chargement de la librairie Dplyr
library(dplyr)
# Lecture du fichier counties.csv
counties<- read.csv("~/Statistique_R/Formation_R/dplyr/datasets/counties.csv")
# Aperçu des données
glimpse(counties)
counties_selected<-counties %>%
select(state, county, population, unemployment)
head(counties_selected)
#Affiche les premier élément de counties_selected
head(counties_selected)
counties_selected %>%
arrange(population)
#Affiche les premier élément de counties_selected
head(counties_selected)
counties_selected<-counties %>%
select(state, county, population, unemployment)
counties_selected<-counties %>%
select(state, county, population, unemployment)
head(counties_selected)
counties_selected %>%
arrange(population)
#Affiche les premier élément de counties_selected
head(counties_selected)
counties_selected %>%
arrange(population)
counties_selected<-counties_selected %>%
arrange(population)
counties_selected<-counties_selected %>%
arrange(population)
#Affiche les premier élément de counties_selected
head(counties_selected)
head(counties)
head(counties_selected)
counties_selected<-counties_selected %>%
arrange(desc(population))
head(counties_selected)
counties_california<- counties_selected %>%
arrange(desc(population))%>%
filter(state == "	California")
head(counties_california)
counties_california<- counties_selected %>%
arrange(desc(population))%>%
filter(state == "	California")
head(counties_california)
View(counties_california)
counties_california<- counties_selected %>%
arrange(desc(population))%>%
filter(state == "California")
head(counties_california)
counties_california<- counties_selected %>%
select(county)
arrange(desc(population))%>%
filter(state == "California")
counties_california<- counties_selected %>%
arrange(desc(population))%>%
filter(state == "California")
head(counties_california)
counties_california<- counties_selected %>%
arrange(desc(population))%>%
filter(state == "California")
head(counties_california['county'])
counties_california<- counties_selected %>%
arrange(desc(population))%>%
filter(state == "California")
head(counties_california%>%select(county))
head(counties_selected%>%select(county))
counties_newyork<- counties_selected %>%
arrange(desc(population))%>%
filter(state == "New York", unemployment < 6)
head(counties_newyork%>%select(county))
View(counties_newyork)
View(counties_newyork)
counties_newyork%>%select(county)
counties_selected<-counties %>%
select(state, county,population, unemployment)%>%
mutate(unemployment_people = population * unemployment / 100)
head(counties_selected)
counties_selected<-counties_selected %>%
mutate(unemployment_people = round(unemployment_people))
head(counties_selected)
counties_selected<-counties %>%
select(state, county, population, unemployment)%>%
mutate(unemployment_people = population * unemployment / 100)
head(counties_selected)
counties_selected<-counties_selected %>%
mutate(unemployment_people = round(unemployment_people), unemployment = NULL)
head(counties_selected)
counties_selected<- counties%>%
mutate(state, county, population, unemployment,
unemployment_people = round(population*unemployment/100),
.keep = "none"
)
head(counties_selected)
counties%>%count()
counties_state<-counties%>%
count(state, sort = TRUE)%>%
rename(counties_number = n)
head(counties_state)
counties_state<-counties%>%
count(state, sort = TRUE)
head(counties_state)
counties_state<-counties %>%
count(state, wt=population,sort = TRUE)
head(counties_state)
counties %>% select(state, county, population ,unemployment)%>%slice_max(unemployment,n=1)
counties %>% select(state, county, population ,unemployment)
counties
librairie(dplyr)
library(dplyr)
counties %>% select(state, county, population ,unemployment)%>%slice_max(unemployment,n=1)
counties %>% select(state, county, population ,unemployment)%>%slice_max(unemployment,n=3)
counties %>% select(state, county, population ,unemployment)%>%slice_min(unemployment,n=3)
knitr::opts_chunk$set(echo = TRUE)
counties %>%
select(state, county, population, unemployment)%>%
slice_max(unemployment, n=3)
# n = nombres d'observations
counties %>%
select(state, county, population, unemployment)%>%
slice_min(unemployment, n=2)
counties %>%
select(state, county, population, unemployment)%>%
slice_min(population, n=2)
counties %>%
select(state, county, population, unemployment)%>%
slice_min(population, n=3)
counties_select_range<- counties%>%
select(state, county, drive:work_at_home)
head(counties_select_range)
head(counties_containing_work)
counties_containing_work <- counties %>%
select(state, county, contains("work"))
head(counties_containing_work)
select_helper
select_helpers
?select_helpers
head(counties_start_with)
counties_start_with<-counties%>%
select(state, county, starts_with("income"))
head(counties_start_with)
counties_without_censusid<- counties %>%
select(-census_id)
head(counties_without_censusid)
counties_without_censusid<- counties %>%
select(-census_id)
head(counties_without_censusid%>%select(state:population))
counties_with_rename <- counties %>%
#rename(new_name = old_name)
rename(unemployment_rate = unemployment)
counties_with_rename <- counties %>%
#rename(new_name = old_name)
rename(unemployment_rate = unemployment)
head(counties_with_rename%>%select(contains("rate")))
counties_with_rename <- counties %>%
#rename(new_name = old_name)
rename(unemployment_rate = unemployment)
head(counties_with_rename%>%select(state, county, contains("rate")))
View(counties)
View(counties)
counties_with_rename<- counties%>%
select(state, county, population, unemployment_rate = unemployment)
head(counties_with_rename)
getwd
getwd()
?rda
babynames<-readRDS("../datasets/babynames.rds")
head(babynames)
babynames%>%slice_max(year,n=1)
max(babynames['year'])
babyname_amy<-babynames %>%
filter(name == "Amy")
head(babyname_amy)
library(ggplot2)
ggplot(babyname_amy, aes(x = year ,y= number))+
geom_line()
babyname_multiples <- babynames%>%
filter(name %in% c("Matthew","Steven","Thomas"))
# Plot
ggplot(babyname_multiples, aes(x = year, y= name, color=name))+
geom_line()
babyname_multiples <- babynames%>%
filter(name %in% c("Matthew","Steven","Thomas"))
# Plot
ggplot(babyname_multiples, aes(x = year, y= number, color=name))+
geom_line()
?lag
0.00000164/0.00000245
0.00000245/0.00000164
.0133
lag(.0133)
0.0205- lag( 0.0205)
0.0205- lag(0.0205)
mtcars
?mtcars
knitr::opts_chunk$set(echo = TRUE)
# Definition du repertoire de travail
source(config.R)
# Definition du repertoire de travail
source("config.R")
setwd(working_directory)
install.packages("readr")
install.packages("lubridate")
install.packages("tidyr")
# Definition du repertoire de travail
source("config.R")
setwd(working_directory)
# Chargement des libraries nécessaire pour le projet
library(dplyr)
library(ggplot2)
library(readr)
library(lubridate)
library(tidyr)
# Definition du repertoire de travail
source("config.R")
setwd(working_directory)
# Chargement des libraries nécessaire pour le projet
packages <- c("dplyr", "ggplot2", "readr", "lubridate", "tidyr")
install_and_load_packages(packages)
station<-read_csv("data/station.txt", sep=";")
station<- read.csv("data/station.txt")
station<- read.csv("~/data/station.txt")
station<- read.csv("~/data/station.txt")
station<- read.csv("~/data/station.txt")
# Definition du repertoire de travail
source("config.R")
setwd(working_directory)
# Chargement des libraries nécessaire pour le projet
packages <- c("dplyr", "ggplot2", "readr", "lubridate", "tidyr")
install_and_load_packages(packages)
getwd()
setwd(working_directory)
getwd()
station<- read.csv("~/data/station.txt")
getwd()
station<- read.csv("/data/station.txt")
station<- read.csv("data/station.txt")
station<- read.csv("~/data/station.txt")
setwd(working_directory)
station<- read.csv("~/data/station.txt")
setwd(working_directory)
station<- read.csv("~/data/station.txt")
getwd()
setwd(working_directory)
station<- read.csv("/data/station.txt")
setwd(working_directory)
station<- read.csv("station.txt")
# Definition du repertoire de travail
source("config.R")
setwd(working_directory)
# Chargement des libraries nécessaire pour le projet
packages <- c("dplyr", "ggplot2", "readr", "lubridate", "tidyr")
install_and_load_packages(packages)
getwd()
setwd(working_directory)
getwd()
setwd(working_directory)
getwd()
source("config.R")
setwd(working_directory)
getwd()
setwd(working_directory)
station<- read.csv("station.txt")
# Definition du repertoire de travail
source("config.R")
setwd(working_directory)
# Chargement des libraries nécessaire pour le projet
packages <- c("dplyr", "ggplot2", "readr", "lubridate", "tidyr")
install_and_load_packages(packages)
# Définir le répertoire de travail pour le document
knitr::opts_knit$set(root.dir = working_directory)
setwd(working_directory)
station<- read.table("station.txt")
station<- read.table("station.txt")
# Definition du repertoire de travail
source("config.R")
setwd(working_directory)
# Chargement des libraries nécessaire pour le projet
packages <- c("dplyr", "ggplot2", "readr", "lubridate", "tidyr")
install_and_load_packages(packages)
# Définir le répertoire de travail pour le document
knitr::opts_knit$set(root.dir = working_directory)
station<- read.table("station.txt")
getwd()
setwd(working_directory)
getwd()
station<- read.table("station.txt")
station<- read.table("station.txt")
station<- read.table("station.txt")
getwd()
station<- read.table("station.txt")
station<- read.table("stations.txt")
getwd()
station<- read.table("stations.txt")
station<- read.table("stations.txt", header = TRUE, sep = ";")
station<- read.table("stations.txt", header = TRUE)
station<- read.csv("stations.txt", header = TRUE)
station<- read.csv("~/stations.txt", header = TRUE)
stations <- read.csv("C:/Users/bayop/Documents/Statistique_R/Bootcamp_FR1/Bootcamp_FR1/Report/data/stations.txt", sep=";")
View(stations)
working_directory + "stations"
paste(working_directory, "stations.txt")
paste0(working_directory, "stations.txt")
View(stations)
# Definition du repertoire de travail
source("config.R")
setwd(working_directory)
# Chargement des libraries nécessaire pour le projet
packages <- c("dplyr", "ggplot2", "readr", "lubridate", "tidyr")
install_and_load_packages(packages)
# Définir le répertoire de travail pour le document
knitr::opts_knit$set(root.dir = working_directory)
station<- read.csv(paste0(working_directory, "stations.txt"), header = TRUE)
View(station)
View(station)
stations<- read.csv(paste0(working_directory, "stations.txt"), header = TRUE, sep = ";")
View(station)
View(station)
stations<- read.csv(paste0(working_directory, "stations.txt"),sep = ";")
View(station)
View(stations)
View(stations)
# Definition du repertoire de travail
source("config.R")
setwd(working_directory)
# Chargement des libraries nécessaire pour le projet
packages <- c("dplyr", "ggplot2", "readr", "lubridate", "tidyr")
install_and_load_packages(packages)
# Définir le répertoire de travail pour le document
knitr::opts_knit$set(root.dir = working_directory)
stations<- read.csv(paste0(working_directory, "stations.txt"),sep = ";")
View(stations)
glimpse(stations)
# Installer et charger ggmap (si ce n'est pas déjà fait)
install_and_load_packages("ggmap")
# Obtenir la carte de la France
france_map <- get_map(location = "France", zoom = 5)
install.packages('osmdata')
library(osmdata)
france_map <- get_map(location = getbb("France"), zoom = 5)
france_map <- get_map(getbb("France"), zoom = 5)
france_map <- get_map( getbb('lisbon'), source="stamen")
lisbon_map <- get_map( getbb('lisbon'), source="stamen")
lisbon_map <- get_map( getbb('lisbon'), source="stamen")
# Installer et charger leaflet (si ce n'est pas déjà fait)
install_and_load_packages("leaflet")
# Installer et charger leaflet (si ce n'est pas déjà fait)
library("leaflet")
knitr::opts_chunk$set(echo = TRUE)
# Installer et charger leaflet (si ce n'est pas déjà fait)
library("leaflet")
install.packages("htmltools")
install.packages("htmltools")
knitr::opts_chunk$set(echo = TRUE)
# Installer et charger leaflet (si ce n'est pas déjà fait)
library("leaflet")
install.packages("htmltools")
library("leaflet")
knitr::opts_chunk$set(echo = TRUE)
# Installer et charger leaflet (si ce n'est pas déjà fait)
library("leaflet")
# Créer une carte
leaflet(stations) %>%
addTiles() %>%
addMarkers(lng = ~Longitude, lat = ~Latitude,
popup = ~paste(Nom, "<br>", "ID:", ID)) %>%
setView(lng = 2.454, lat = 46.603, zoom = 5) %>%  # Centrer la carte sur la France
addProviderTiles(providers$OpenStreetMap)
install.packages("webshot")
install.packages("webshot2")
library(webshot2)
metropole <- subset(stations.ID, Latitude > 40 & Longitude > -10)
metropole <- subset(ID, Latitude > 40 & Longitude > -10)
metropole <- subset(stations, Latitude > 40 & Longitude > -10)
install.packages(sf)
install.packages("sf")
library(sf)
library(sf)
# Charger des données géographiques
ggplot(data = metropole) +
geom_sf() +
geom_point(data = Nom, aes(x = longitude, y = latitude), color = "blue", size = 3)
library(ggplot2)
library(sf)
# Charger des données géographiques
ggplot(data = metropole) +
geom_sf() +
geom_point(data = Nom, aes(x = longitude, y = latitude), color = "blue", size = 3)
# Charger des données géographiques
# Étape 3 : Convertir les données filtrées en objet sf
metropole_sf <- st_as_sf(metropole, coords = c("Longitude", "Latitude"), crs = 4326)
# Étape 4 : Charger les données géographiques de 'metropole' (si nécessaire)
# Si vous avez besoin de charger une carte de fond, par exemple :
# metropole_shape <- st_read("path/to/your/metropole.shp")
# Étape 5 : Créer la carte
ggplot() +
# geom_sf(data = metropole_shape, fill = "lightgrey") +  # Décommentez si vous avez un shapefile à afficher
geom_sf(data = metropole_sf, aes(geometry = geometry), color = "blue", size = 3) +  # Afficher les stations
theme_minimal() +  # Un thème minimal pour un rendu plus propre
labs(title = "Stations Filtrées sur la Carte", x = "Longitude", y = "Latitude")
library(rnaturalearth)
install.packages("rnaturalearth")
library(rnaturalearth)
france_shape <- ne_countries(scale = "medium", country = "France", returnclass = "sf")
library(rnaturalearth)
france_shape <- ne_countries(scale = "medium", country = "France", returnclass = "sf")
france_shape <- ne_countries(scale = "medium", country = "France", returnclass = "sf")
install.packages("rnaturalearthdata")
library(rnaturalearth)
france_shape <- ne_countries(scale = "medium", country = "France", returnclass = "sf")
# Charger des données géographiques
# Étape 3 : Convertir les données filtrées en objet sf
metropole_sf <- st_as_sf(metropole, coords = c("Longitude", "Latitude"), crs = 4326)
# Si vous n'avez pas de shapefile, vous pouvez utiliser rnaturalearth pour obtenir la carte
library(rnaturalearth)
france_shape <- ne_countries(scale = "medium", country = "France", returnclass = "sf")
# Étape 5 : Créer la carte
ggplot() +
geom_sf(data = france_shape, fill = "lightgrey") +  # Afficher la carte de la France
geom_sf(data = metropole_sf, aes(geometry = geometry), color = "blue", size = 3) +  # Afficher les stations
theme_minimal() +  # Un thème minimal pour un rendu plus propre
labs(title = "Stations sur la Carte de la France", x = "Longitude", y = "Latitude")
